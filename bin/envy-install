#!/usr/bin/env ruby

require 'open3'

$LOAD_PATH.unshift File.expand_path("../lib", __dir__) # For use/testing when no gem is installed
require "envy"

sys = Envy::HostSystem

if sys.platform.type == :Windows
  STDERR.puts 'Not implemented yet'
  exit 1
end

module InstallerCommon
  VERSION_TEXT = "installer for envy v#{Envy::VERSION}"

  def run(argv)
    opts = {}
    argv.select! do |arg|
      !case arg
        when '-h', '--help', 'help' then opts[:help] = true
        when '-v', '--version'      then opts[:ver] = true
        when '--uninstall'          then opts[:uninstall] = true
        else false
      end
    end

    if opts[:ver]
      puts VERSION_TEXT
    end

    if opts[:help]
      puts VERSION_TEXT
      puts usage_text
      puts help_text
    end

    do_run(argv, !opts[:uninstall])
  end
end

class Installer
  include InstallerCommon
  def initialize(sys)
    @sys = sys
  end
  def detect_installed_envy?()
    stdout, stderr, code = Open3.capture3("bash -ic 'command -v envy'")
    code.success?
  end
  def usage_text
    <<~EOF
      usage: envy-install [--help] [--version] [--uninstall] [--dotfile <path>]
    EOF
  end
  def help_text
    <<~EOF
      HELP HELP
    EOF
  end
  ENVY_INSTALLATION_BEGIN = '#### BEGIN envy installation (don\'t remove line)'
  ENVY_INSTALLATION_END = '#### END envy installation (don\'t remove line)'

  def find_existing_installation_data(dotfile)
    return nil if !File.exist?(dotfile)

    raise Envy::Error.new "'#{dotfile}' exists but is not a file. You need to choose a file." if !File.file?(dotfile)

    lines = File.readlines(dotfile)
    first = nil
    last = nil
    lines.each_with_index do |l, i|
      lc = l.chomp
      if lc == ENVY_INSTALLATION_BEGIN
        first = i
      elsif lc == ENVY_INSTALLATION_END
        last = i
      end
    end

    return nil if !first && !last

    if !first || !last
      raise Envy::Error.new <<~EOF
        #{dotfile}' contains a broken confy insallation.
        You need to remove it manually
      EOF
    end

    num = last - first + 1
    return {first: first, num: num, lines: lines}
  end

  def try_uninstall(dotfile)
    found = find_existing_installation_data(dotfile)
    if !found || found[:num] == 0
      raise Envy::Error.new "'#{dotfile}' doesn't seem to contain an envy installation"
    end

    lines = found[:lines]
    lines[found[:first], found[:num]] = []
    File.open(dotfile, 'w') { |f| f.puts lines }
    puts "Suncessfully uninstalled confy from '#{dotfile}'"
  end

  SOURCE_FILE = 'envy.sh'
  def try_install(dotfile)
    install_lines = [
      ENVY_INSTALLATION_BEGIN,
      File.read(File.join(__dir__, SOURCE_FILE)),
      ENVY_INSTALLATION_END
    ]

    found = find_existing_installation_data(dotfile)

    openmode = 'a'
    if found
      lines = found[:lines]
      lines[found[:first], found[:num]] = install_lines
      install_lines = lines
      openmode = 'w'
    end

    File.open(dotfile, openmode) { |f| f.puts install_lines }
    puts <<~EOF
      Sucessfully installed confy to '#{dotfile}'
      Source the file, or restart the bash session if the file is auto-sourced.
    EOF
  end

  DEFAULT_DOTFILE = '.bashrc'
  def do_run(argv, installing)
    dotfile = nil

    if !argv.empty?
      raise Envy::Error.new usage_text if argv.shift != '--dotfile' || argv.length != 1
      dotfile = argv[0]
      dotfile = File.join(Dir.pwd, dotfile) if !@sys.platform.likely_abs_path?(dotfile)
    end

    dotfile ||= File.join(Dir.home, DEFAULT_DOTFILE)

    installing ? try_install(dotfile) : try_uninstall(dotfile)
  end
end

installer = Installer.new(sys)

if installer.detect_installed_envy?
  puts "It seems that you already have envy installed"
  puts "Do you want to reinstall it? (y,n)"
end

begin
  installer.run(ARGV.dup)
rescue Envy::Error => e
  STDERR.puts e.message
  exit 1
end
